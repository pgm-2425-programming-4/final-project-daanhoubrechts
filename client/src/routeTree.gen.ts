/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as ProjectsTasksProjectImport } from './routes/projects/$tasksProject'
import { Route as ProjectsProjectIdImport } from './routes/projects/$projectId'
import { Route as ProjectsProjectIdBacklogImport } from './routes/projects_/$projectId/backlog'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsTasksProjectRoute = ProjectsTasksProjectImport.update({
  id: '/projects/$tasksProject',
  path: '/projects/$tasksProject',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIdRoute = ProjectsProjectIdImport.update({
  id: '/projects/$projectId',
  path: '/projects/$projectId',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectIdBacklogRoute = ProjectsProjectIdBacklogImport.update({
  id: '/projects_/$projectId/backlog',
  path: '/projects/$projectId/backlog',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectId': {
      id: '/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdImport
      parentRoute: typeof rootRoute
    }
    '/projects/$tasksProject': {
      id: '/projects/$tasksProject'
      path: '/projects/$tasksProject'
      fullPath: '/projects/$tasksProject'
      preLoaderRoute: typeof ProjectsTasksProjectImport
      parentRoute: typeof rootRoute
    }
    '/projects_/$projectId/backlog': {
      id: '/projects_/$projectId/backlog'
      path: '/projects/$projectId/backlog'
      fullPath: '/projects/$projectId/backlog'
      preLoaderRoute: typeof ProjectsProjectIdBacklogImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/projects/$tasksProject': typeof ProjectsTasksProjectRoute
  '/projects/$projectId/backlog': typeof ProjectsProjectIdBacklogRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/projects/$tasksProject': typeof ProjectsTasksProjectRoute
  '/projects/$projectId/backlog': typeof ProjectsProjectIdBacklogRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/projects/$projectId': typeof ProjectsProjectIdRoute
  '/projects/$tasksProject': typeof ProjectsTasksProjectRoute
  '/projects_/$projectId/backlog': typeof ProjectsProjectIdBacklogRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/projects/$projectId'
    | '/projects/$tasksProject'
    | '/projects/$projectId/backlog'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/projects/$projectId'
    | '/projects/$tasksProject'
    | '/projects/$projectId/backlog'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/projects/$projectId'
    | '/projects/$tasksProject'
    | '/projects_/$projectId/backlog'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ProjectsProjectIdRoute: typeof ProjectsProjectIdRoute
  ProjectsTasksProjectRoute: typeof ProjectsTasksProjectRoute
  ProjectsProjectIdBacklogRoute: typeof ProjectsProjectIdBacklogRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ProjectsProjectIdRoute: ProjectsProjectIdRoute,
  ProjectsTasksProjectRoute: ProjectsTasksProjectRoute,
  ProjectsProjectIdBacklogRoute: ProjectsProjectIdBacklogRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/about",
        "/projects/$projectId",
        "/projects/$tasksProject",
        "/projects_/$projectId/backlog"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/about": {
      "filePath": "about.jsx"
    },
    "/projects/$projectId": {
      "filePath": "projects/$projectId.jsx"
    },
    "/projects/$tasksProject": {
      "filePath": "projects/$tasksProject.jsx"
    },
    "/projects_/$projectId/backlog": {
      "filePath": "projects_/$projectId/backlog.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
